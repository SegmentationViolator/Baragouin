package segv;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class TokenizerTest {
    @ParameterizedTest
    @MethodSource("provideParameters")
    void tokenizerTest(String text, String[] tokens) {
        var tokenizer = new Tokenizer(text);

        for (int i = 0; i < tokens.length; i++) {
            assertEquals(tokens[i], tokenizer.nextToken());
        }

        assertEquals(null, tokenizer.nextToken());
    }

    static Stream<Arguments> provideParameters() {
        // @formatter:off
        return Stream.of(
            Arguments.of(
                "Waltz, bad nymph, for quick jigs vex.",
                new String[]{ "Waltz", ",", "bad", "nymph", ",", "for", "quick", "jigs", "vex", "." }
            ),
            Arguments.of(
                "┘Ж╪╡ ╪н┘Г┘К┘Е ┘Д┘З ╪│╪▒ ┘В╪з╪╖╪╣ ┘И╪░┘И ╪┤╪г┘Ж ╪╣╪╕┘К┘Е ┘Е┘Г╪к┘И╪и ╪╣┘Д┘Й ╪л┘И╪и ╪г╪о╪╢╪▒ ┘И┘Е╪║┘Д┘Б ╪и╪м┘Д╪п ╪г╪▓╪▒┘В",
                new String[]{ "┘Ж╪╡", "╪н┘Г┘К┘Е", "┘Д┘З", "╪│╪▒", "┘В╪з╪╖╪╣", "┘И╪░┘И", "╪┤╪г┘Ж", "╪╣╪╕┘К┘Е", "┘Е┘Г╪к┘И╪и", "╪╣┘Д┘Й", "╪л┘И╪и", "╪г╪о╪╢╪▒", "┘И┘Е╪║┘Д┘Б", "╪и╪м┘Д╪п", "╪г╪▓╪▒┘В" }
            ),
            Arguments.of(
                "сАЮсАосАЯсАнсАпсАасА║сАЩсА╛ сАЙсАмсАПсА║сААсА╝сАосА╕сАЫсА╛сАДсА║сАЮсАКсА║ сАбсАмсАЪсАпсАЭсАНсА╣сАОсАФсАЖсА▒сА╕сАКсА╜сА╛сАФсАЕсАА сАЗсАЬсАФсА║сАИсА▒сА╕сАШсА▒сА╕сАЧсАмсАТсА╢сАХсАДсА║сАСсААсА║ сАбсАУсАнсАЛсА╣сАМсАмсАФсА║сАЬсА╗сААсА║ сАВсАГсАФсАПсАЦсАРсА║сАБсА▓сА╖сАЮсАКсА║сБЛ",
                new String[]{ "сАЮсАосАЯсАнсАпсАасА║сАЩсА╛", "сАЙсАмсАПсА║сААсА╝сАосА╕сАЫсА╛сАДсА║сАЮсАКсА║", "сАбсАмсАЪсАпсАЭсАНсА╣сАОсАФсАЖсА▒сА╕сАКсА╜сА╛сАФсАЕсАА", "сАЗсАЬсАФсА║сАИсА▒сА╕сАШсА▒сА╕сАЧсАмсАТсА╢сАХсАДсА║сАСсААсА║", "сАбсАУсАнсАЛсА╣сАМсАмсАФсА║сАЬсА╗сААсА║", "сАВсАГсАФсАПсАЦсАРсА║сАБсА▓сА╖сАЮсАКсА║", "сБЛ" }
            ),
            Arguments.of(
                "╨Т ╤З╨░╤Й╨░╤Е ╤О╨│╨░ ╨╢╨╕╨╗ ╨▒╤Л ╤Ж╨╕╤В╤А╤Г╤Б? ╨Ф╨░, ╨╜╨╛ ╤Д╨░╨╗╤М╤И╨╕╨▓╤Л╨╣ ╤Н╨║╨╖╨╡╨╝╨┐╨╗╤П╤А!",
                new String[]{ "╨Т", "╤З╨░╤Й╨░╤Е", "╤О╨│╨░", "╨╢╨╕╨╗", "╨▒╤Л", "╤Ж╨╕╤В╤А╤Г╤Б", "?", "╨Ф╨░", ",", "╨╜╨╛", "╤Д╨░╨╗╤М╤И╨╕╨▓╤Л╨╣", "╤Н╨║╨╖╨╡╨╝╨┐╨╗╤П╤А", "!" }
            ),
            Arguments.of(
                "эВдьКдьЭШ ъ│аьЬа ьб░ъ▒┤ьЭА ьЮЕьИаыБ╝ыжм ызМыВШьХ╝ эХШъ│а эК╣ы│ДэХЬ ъ╕░ьИаьЭА эХДьЪФь╣Ш ьХКыЛд.",
                new String[]{ "эВдьКдьЭШ", "ъ│аьЬа", "ьб░ъ▒┤ьЭА", "ьЮЕьИаыБ╝ыжм", "ызМыВШьХ╝", "эХШъ│а", "эК╣ы│ДэХЬ", "ъ╕░ьИаьЭА", "эХДьЪФь╣Ш", "ьХКыЛд", "." }
            ),
            Arguments.of(
                "рдШрдЯрд╛рд╢реНрдЪ рд╢рдЩреНрдЦрд╛рд╢реНрдЪ рдзрд░рдиреНрддрд┐ рддреЛрдпрдореН ред\nрд╢рдард╛рджрд┐рдореВрдврд╛ рди рднрдЬрдиреНрддрд┐ рд╕рддреНрдпрдореН ред\nрд╡рд░рд╛рд╣рдпреВрдерд╛рдирд┐ рдХрд┐рд▓рдиреНрддрд┐ рдкреБрдЪреНрдЫреИрдГ ред\nрдЧрдбреЗрд╖реБ рдЭрдЮреНрдЭрд╛рдГ рд╕рдмрд▓рдВ рдлрдгрдиреНрддреЗ рее",
                new String[]{ "рдШрдЯрд╛рд╢реНрдЪ", "рд╢рдЩреНрдЦрд╛рд╢реНрдЪ", "рдзрд░рдиреНрддрд┐", "рддреЛрдпрдореН", "ред", "рд╢рдард╛рджрд┐рдореВрдврд╛", "рди", "рднрдЬрдиреНрддрд┐", "рд╕рддреНрдпрдореН", "ред", "рд╡рд░рд╛рд╣рдпреВрдерд╛рдирд┐", "рдХрд┐рд▓рдиреНрддрд┐", "рдкреБрдЪреНрдЫреИрдГ", "ред", "рдЧрдбреЗрд╖реБ", "рдЭрдЮреНрдЭрд╛рдГ", "рд╕рдмрд▓рдВ", "рдлрдгрдиреНрддреЗ", "рее" }
            ),
            Arguments.of(
                "Can you imagine this: 100% excitingтАФlike, utterly surreal?! ЁЯе│тЬи First, we have the key ingredients: @#^$; you knowтАФ1, 2, 3... the party starts at 7:00 PM! And don't forget to RSVP by 5/15/2025! ЁЯдФЁЯТм",
                new String[]{ "Can", "you", "imagine", "this", ":", "100", "%", "exciting", "тАФ", "like", ",", "utterly", "surreal", "?", "!", "ЁЯе│", "тЬи", "First", ",", "we", "have", "the", "key", "ingredients", ":", "@", "#", "^", "$", ";", "you", "know", "тАФ", "1", ",", "2", ",", "3", ".", ".", ".", "the", "party", "starts", "at", "7", ":", "00", "PM", "!", "And", "don", "'", "t", "forget", "to", "RSVP", "by", "5", "/", "15", "/", "2025", "!", "ЁЯдФ", "ЁЯТм" }
            ),
            Arguments.of(
                "Hollow Technique: Purple (шЩЪх╝ПуАМшМИуАН/уБНуВЗуБЧуБН уВАуВЙуБХуБН KyoshikiуГ╗Murasaki)",
                new String[]{ "Hollow", "Technique", ":", "Purple", "(", "шЩЪх╝П", "уАМ", "шМИ", "уАН", "/", "уБНуВЗуБЧуБН", "уВАуВЙуБХуБН", "Kyoshiki", "уГ╗", "Murasaki", ")" }
            )
        );
        // @formatter:on
    }
}
